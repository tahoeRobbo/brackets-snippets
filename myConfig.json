"edc.brackets-snippets.hints": [
    {
        "trigger": "cl",
        "scope": "javascript",
        "description": "console.log",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "console.log(${1:obj});${2}",
        "source": "system"
    },
    {
        "trigger": "cd",
        "scope": "javascript",
        "description": "console.dir",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "console.dir(${1:obj});${2}",
        "source": "system"
    },
    {
        "trigger": "ce",
        "scope": "javascript",
        "description": "console.error",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "console.error(${1:obj});${2}",
        "source": "system"
    },
    {
        "trigger": "cll",
        "scope": "javascript",
        "description": "console.log",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "console.log('${1:obj}:', ${1:obj});${2}",
        "source": "system"
    },
    {
        "trigger": "cdd",
        "scope": "javascript",
        "description": "console.dir",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "console.dir('${1:obj}:', ${1:obj});${2}",
        "source": "system"
    },
    {
        "trigger": "cee",
        "scope": "javascript",
        "description": "console.error",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "console.error('${1:obj}:', ${1:obj});${2}",
        "source": "system"
    },
    {
        "trigger": "ae",
        "scope": "javascript",
        "description": "document.addEventListener",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.addEventListener('${2:event}', function(e) {\n  ${3}\n});",
        "source": "system"
    },
    {
        "trigger": "ac",
        "scope": "javascript",
        "description": "document.appendChild",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.appendChild(${2:elem});${3}",
        "source": "system"
    },
    {
        "trigger": "rc",
        "scope": "javascript",
        "description": "document.removeChild",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.removeChild(${2:elem});${3}",
        "source": "system"
    },
    {
        "trigger": "cel",
        "scope": "javascript",
        "description": "document.createElement",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.createElement(${2:elem});${3}",
        "source": "system"
    },
    {
        "trigger": "gi",
        "scope": "javascript",
        "description": "document.getElementById",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.getElementById('${2:id}');${3}",
        "source": "system"
    },
    {
        "trigger": "gc",
        "scope": "javascript",
        "description": "document.getElementsByClassName",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.getElementsByClassName('${2:class}');${3}",
        "source": "system"
    },
    {
        "trigger": "gt",
        "scope": "javascript",
        "description": "document.getElementsByTagName",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.getElementsByTagName('${2:tag}');${3}",
        "source": "system"
    },
    {
        "trigger": "qs",
        "scope": "javascript",
        "description": "document.querySelector",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.querySelector('${2:selector}');${3}",
        "source": "system"
    },
    {
        "trigger": "qsa",
        "scope": "javascript",
        "description": "document.querySelectorAll",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:document}.querySelectorAll('${2:selector}');${3}",
        "source": "system"
    },
    {
        "trigger": "fe",
        "scope": "javascript",
        "description": "forEach",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:myArray}.forEach(function (${2:elem}) {\n  ${3}\n});",
        "source": "system"
    },
    {
        "trigger": "fi",
        "scope": "javascript",
        "description": "for in",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "for (${1:prop} in ${2:obj}) {\n  if (${2:obj}.hasOwnProperty(${1:prop})) {\n    ${3}\n  }\n}",
        "source": "system"
    },
    {
        "trigger": "fn",
        "scope": "javascript",
        "description": "function",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "function ${1:methodName}(${2:arguments}) {\n  ${3}\n}",
        "source": "system",
        "mTime": 1468779638230
    },
    {
        "trigger": "afn",
        "scope": "javascript",
        "description": "anonymous function",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "function(${1:arguments}) {\n  ${2}\n}",
        "source": "system",
        "mTime": 1468797657447
    },
    {
        "trigger": "pr",
        "scope": "javascript",
        "description": "prototype",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "${1:ClassName}.prototype.${2:methodName} = function (${3:arguments}) {\n  ${4}\n};",
        "source": "system"
    },
    {
        "trigger": "sw",
        "scope": "javascript",
        "description": "switch statement",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "switch(${1:expression}) {\n  case ${2:value}:\n    ${3}\n    break;\n  default:\n    break;\n}",
        "source": "system"
    },
    {
        "trigger": "si",
        "scope": "javascript",
        "description": "setInterval",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "setInterval(function() {\n  ${2}\n}, ${1:delay});",
        "source": "system"
    },
    {
        "trigger": "st",
        "scope": "javascript",
        "description": "setTimeout",
        "tag": "VanillaJS",
        "tagHide": true,
        "text": "setTimeout(function() {\n  ${2}\n}, ${1:delay});",
        "source": "system"
    },
    {
        "trigger": "iife",
        "description": "Iffe wrapper",
        "scope": "javascript",
        "text": "(function(){\n    ${1}\n})();",
        "mTime": 1468778290839
    },
    {
        "trigger": "fac",
        "description": "Angular Factory in JP Style",
        "scope": "javascript",
        "text": "// ${2:FactoryName}.js\n(function(){\n    'use strict';\n    \n    angular\n        .module('${1:AppName}')\n        .factory('${2:FactoryName}', ${2:FactoryName});\n        \n    ${2:FactoryName}.$inject = [${3:DEPENDENCIES}];\n    \n    function ${2:FactoryName}(${3:DEPENDENCIES}) {\n        \n    }\n})();\n",
        "mTime": 1468797407181
    },
    {
        "trigger": "fl",
        "description": "For loop based on array length",
        "scope": "javascript",
        "text": "for (var ${1:i} = 0, len = ${2:array}.length; ${1:i} < len; ${1:i}++) {\n    ${3}\n}",
        "mTime": 1468795816905
    },
    {
        "trigger": "lfn",
        "description": "Let Arrow Function",
        "scope": "javascript",
        "text": "let ${1:fnName} = (${2:args}) => ${3};",
        "mTime": 1468797119195
    },
    {
        "trigger": "fll",
        "description": "for loop using let",
        "scope": "javascript",
        "text": "for (let ${1:i} = 0, len = ${2:array}.length; ${1:i} < len; ${1:i}++) {\n    ${3}\n}",
        "mTime": 1468797173804
    },
    {
        "trigger": "cfn",
        "description": "const arrow function",
        "scope": "javascript",
        "text": "const ${1:fnName} = (${2:args}) => ${3};",
        "mTime": 1468797242741
    },
    {
        "trigger": "ctrl",
        "description": "Angular Controller in JP Style",
        "scope": "javascript",
        "text": "// ${2:ControllerName}.js\n(function(){\n    'use strict';\n    \n    angular\n        .module('${1:AppName}')\n        .factory('${2:ControllerName}', ${2:ControllerName});\n        \n    ${2:ControllerName}.$inject = [${3:DEPENDENCIES}];\n    \n    function ${2:ControllerName}(${3:DEPENDENCIES}) {\n        var vm = this;\n        \n        \n    }\n})();\n",
        "mTime": 1468797759480
    }
]